[
  {
    "sha": "3360db699317e85e214225c7a124aa66585982eb",
    "filename": "nuxeo-runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/JVMVersion.java",
    "status": "added",
    "additions": 82,
    "deletions": 0,
    "changes": 82,
    "blob_url": "https://github.com/nuxeo/nuxeo/blob/67bb2b0a5b32463c69b013d6ef0c9eefa08f31ee/nuxeo-runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/JVMVersion.java",
    "raw_url": "https://github.com/nuxeo/nuxeo/raw/67bb2b0a5b32463c69b013d6ef0c9eefa08f31ee/nuxeo-runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/JVMVersion.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo/contents/nuxeo-runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/JVMVersion.java?ref=67bb2b0a5b32463c69b013d6ef0c9eefa08f31ee",
    "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2012-2013 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.nuxeo.launcher.config;\n+\n+import java.text.ParseException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class JVMVersion implements Comparable<JVMVersion> {\n+\n+    public final int major;\n+\n+    public final int update;\n+\n+    public enum UpTo {\n+        MAJOR, UPDATE;\n+    }\n+\n+    public JVMVersion(int major, int minor) {\n+        this.major = major;\n+        update = minor;\n+    }\n+\n+    public int compareTo(JVMVersion o, UpTo upTo) {\n+        if (major != o.major) {\n+            return major - o.major;\n+        }\n+        if (upTo == UpTo.MAJOR) {\n+            return 0;\n+        }\n+        if (update != o.update) {\n+            return update - o.update;\n+        }\n+        return 0;\n+    }\n+\n+\n+    @Override\n+    public int compareTo(JVMVersion o) {\n+        return compareTo(o, UpTo.UPDATE);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%d.%d\", major, update);\n+    }\n+\n+    public static JVMVersion parse(String version) throws ParseException {\n+        if (version.startsWith(\"1.\")) {\n+            return parsePreJdk9(version);\n+        }\n+        throw new ParseException(\"Unknown JVM version format\", -1);\n+    }\n+\n+    static final Pattern PreJDK9Pattern = Pattern.compile(\"1.(\\\\d).\\\\d(?:_(\\\\d+))?(?:-.*)?\");\n+\n+    public static JVMVersion parsePreJdk9(String version) throws ParseException {\n+        Matcher matcher = PreJDK9Pattern.matcher(version);\n+        if (!matcher.matches()) {\n+            throw new ParseException(\"Cannot parse \" + version + \" as a pre jdk9 jvm version\", -1);\n+        }\n+        final int groupCount = matcher.groupCount();\n+        String major = matcher.group(1);\n+        String minor = groupCount >= 2 ? matcher.group(2) : null;\n+        return new JVMVersion(Integer.parseInt(major), minor == null ? 0 : Integer.parseInt(minor));\n+    }\n+\n+}\n\\ No newline at end of file"
  },
  {
    "sha": "34128a474337b7a053eb1e27d69d53032a360b3e",
    "filename": "nuxeo-runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java",
    "status": "modified",
    "additions": 35,
    "deletions": 3,
    "changes": 38,
    "blob_url": "https://github.com/nuxeo/nuxeo/blob/67bb2b0a5b32463c69b013d6ef0c9eefa08f31ee/nuxeo-runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java",
    "raw_url": "https://github.com/nuxeo/nuxeo/raw/67bb2b0a5b32463c69b013d6ef0c9eefa08f31ee/nuxeo-runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java",
    "contents_url": "https://api.github.com/repos/nuxeo/nuxeo/contents/nuxeo-runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java?ref=67bb2b0a5b32463c69b013d6ef0c9eefa08f31ee",
    "patch": "@@ -301,11 +301,41 @@ public void testCheckJavaVersionNoFail() throws Exception {\n         testCheckJavaVersion(false);\n     }\n \n-    protected void testCheckJavaVersion(boolean fail) throws ConfigurationException {\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWrongJavaVersionFail() {\n+        ConfigurationGenerator.checkJavaVersion(\"1.not-a-version\", \"1.8.0_40\", false, true);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWrongPreJdk9VersionFail() {\n+        ConfigurationGenerator.checkJavaVersion(\"1.not-a-version\", \"1.8.0_40\", false, false);\n+    }\n+\n+    @Test\n+    public void testWrongJavaVersionNoFail() {\n+        runJVMCheck(false, new Runnable() {\n+            @Override\n+            public void run() {\n+                ConfigurationGenerator.checkJavaVersion(\"not-a-version\", \"1.8.0_40\", true, true);\n+            }\n+        });\n+    }\n+\n+    protected void testCheckJavaVersion(final boolean fail) {\n+        runJVMCheck(fail, new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                checkJavaVersions(!fail);\n+            }\n+        });\n+    }\n+\n+    protected void runJVMCheck(boolean fail, Runnable runnable) {\n         String old = System.getProperty(JVMCHECK_PROP);\n         try {\n             System.setProperty(JVMCHECK_PROP, fail ? JVMCHECK_FAIL : JVMCHECK_NOFAIL);\n-            checkJavaVersions(!fail);\n+            runnable.run();\n         } finally {\n             if (old == null) {\n                 System.clearProperty(JVMCHECK_PROP);\n@@ -315,12 +345,14 @@ protected void testCheckJavaVersion(boolean fail) throws ConfigurationException\n         }\n     }\n \n-    protected void checkJavaVersions(boolean compliant) throws ConfigurationException {\n+    protected void checkJavaVersions(boolean compliant) {\n         // ok\n         checkJavaVersion(true, \"1.8.0_40\", \"1.8.0_40\");\n         checkJavaVersion(true, \"1.8.0_45\", \"1.8.0_40\");\n         checkJavaVersion(true, \"1.8.0_101\", \"1.8.0_40\");\n         checkJavaVersion(true, \"1.8.0_400\", \"1.8.0_40\");\n+        checkJavaVersion(true, \"1.8.0_72-internal\", \"1.8.0_40\");\n+        checkJavaVersion(true, \"1.8.0-internal\", \"1.8.0\");\n         checkJavaVersion(true, \"1.9.0_1\", \"1.8.0_40\");\n         // compliant if jvmcheck=nofail\n         checkJavaVersion(compliant, \"1.7.0_1\", \"1.8.0_40\");"
  }
]